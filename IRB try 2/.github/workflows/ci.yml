name: CI Pipeline

on:
  push:
    branches: [main, develop, deployment-vercel-ready]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./artifacts/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  database-migration-test:
    name: Database Migration Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: file:./test.db

      - name: Run migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: file:./test.db

      - name: Validate Prisma schema
        run: npx prisma validate

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, unit-tests, database-migration-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: file:./dev.db
          JWT_SECRET: test-secret-for-ci-build
          AIGENTS_WEBHOOK_SECRET: test-webhook-secret
          AIGENTS_FOLDER_ID: test-folder-id
          USE_AIGENTS_MOCK: 'true'

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            .next
            package.json
            package-lock.json
          retention-days: 1

  e2e-tests:
    name: E2E Tests (Chromium)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: file:./test.db

      - name: Run E2E tests
        run: npx playwright test --project=chromium
        env:
          DATABASE_URL: file:./test.db
          JWT_SECRET: test-secret-for-ci-e2e
          BASE_URL: http://localhost:3000
          AIGENTS_WEBHOOK_SECRET: test-webhook-secret
          AIGENTS_FOLDER_ID: test-folder-id
          USE_AIGENTS_MOCK: 'true'

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: irb-system:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DATABASE_URL=file:./dev.db
            JWT_SECRET=test-secret

      - name: Test Docker image health
        run: |
          docker build -t irb-system-test .
          docker run --rm -d -p 3000:3000 \
            -e DATABASE_URL=file:./dev.db \
            -e JWT_SECRET=test-secret \
            -e AIGENTS_WEBHOOK_SECRET=test-webhook \
            -e AIGENTS_FOLDER_ID=test-folder \
            -e USE_AIGENTS_MOCK=true \
            --name irb-test irb-system-test

          # Wait for container to be healthy
          for i in {1..30}; do
            if docker exec irb-test node -e "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"; then
              echo "Container is healthy"
              docker stop irb-test
              exit 0
            fi
            echo "Waiting for container to be healthy... ($i/30)"
            sleep 2
          done

          echo "Container failed health check"
          docker logs irb-test
          docker stop irb-test
          exit 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
